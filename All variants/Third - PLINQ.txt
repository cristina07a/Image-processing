'BUTTONS'    

'SEPIA'
    Private Sub SepiaBtn_Click(sender As Object, e As EventArgs) Handles SepiaBtn.Click

        If selectedControlFromLayer IsNot Nothing AndAlso TypeOf selectedControlFromLayer Is PictureBox Then
            Dim pictureBox As PictureBox = CType(selectedControlFromLayer, PictureBox)

            Dim originalImage As Image = pictureBox.Image

            Dim stopwatch As New Stopwatch()
            stopwatch.Start()

            If originalImage IsNot Nothing Then

                Dim sepiaImage As Image = ApplySepiaEffect(originalImage)

                ' actualizare imagine cu efect sepia
                pictureBox.Image = sepiaImage
                Dim elapsedMilliseconds As Long = stopwatch.ElapsedMilliseconds
                Time.Text = " " & elapsedMilliseconds
            End If
        End If
    End Sub

    'BLUR CU RADIUS'
    Private Sub BlurBtn_Click(sender As Object, e As EventArgs) Handles BlurBtn.Click

        If selectedControlFromLayer IsNot Nothing AndAlso TypeOf selectedControlFromLayer Is PictureBox Then
            Dim pictureBox As PictureBox = DirectCast(selectedControlFromLayer, PictureBox)
            Dim bmp As New Bitmap(pictureBox.Image)
            Dim blurRadius As Integer = 2

            Dim stopwatch As New Stopwatch()
            stopwatch.Start()

            Dim blurredBmp As Bitmap = ApplyBlurEffect(bmp, blurRadius)

            ' actualizare imagine cu efect blurat
            pictureBox.Image = blurredBmp
            Dim elapsedMilliseconds As Long = stopwatch.ElapsedMilliseconds
            Time.Text = " " & elapsedMilliseconds
        End If
    End Sub

    'GRAYSCALE'
    Private Sub GrayscaleBtn_Click(sender As Object, e As EventArgs) Handles GrayscaleBtn.Click

        If selectedControlFromLayer IsNot Nothing AndAlso TypeOf selectedControlFromLayer Is PictureBox Then
            Dim pictureBox As PictureBox = DirectCast(selectedControlFromLayer, PictureBox)
            Dim bmp As New Bitmap(pictureBox.Image)
            Dim stopwatch As New Stopwatch()
            stopwatch.Start()

            Dim grayscaleBmp As Bitmap = ApplyGrayscaleEffect(bmp)

            ' actualizare imagine cu efect grayscale
            pictureBox.Image = grayscaleBmp
            Dim elapsedMilliseconds As Long = stopwatch.ElapsedMilliseconds
            Time.Text = " " & elapsedMilliseconds
        End If
    End Sub












   'FUNCTIONS'


    Private Function ApplyGrayscaleEffect(image As Bitmap) As Bitmap
        If image Is Nothing OrElse image.Width = 0 OrElse image.Height = 0 Then
            Return image
        End If

        Dim bitmap As New Bitmap(image.Width, image.Height, PixelFormat.Format32bppArgb)
        Using g As Graphics = Graphics.FromImage(bitmap)
            g.DrawImage(image, New Rectangle(0, 0, bitmap.Width, bitmap.Height))
        End Using

        'PLINQ'
        Dim result = bitmap.AsParallel().Select(Function(pixel)
                                                    Dim gray = CInt(0.2125 * pixel.R + 0.7154 * pixel.G + 0.0721 * pixel.B)
                                                    Return Color.FromArgb(gray, gray, gray)
                                                End Function).ToArray()

        Dim resultBitmap As New Bitmap(image.Width, image.Height)
        For y As Integer = 0 To image.Height - 1
            For x As Integer = 0 To image.Width - 1
                resultBitmap.SetPixel(x, y, result(y * image.Width + x))
            Next
        Next

        Return resultBitmap
    End Function

    Private Function ApplySepiaEffect(image As Bitmap) As Image
        If image Is Nothing Then
            Return image
        End If

        Dim bitmap As New Bitmap(image.Width, image.Height, PixelFormat.Format32bppArgb)
        Using g As Graphics = Graphics.FromImage(bitmap)
            g.DrawImage(image, New Rectangle(0, 0, bitmap.Width, bitmap.Height))
        End Using

        'PLINQ'
        Dim result = bitmap.AsParallel().Select(Function(pixel)
                                                    Dim sepiaR As Integer = CInt(pixel.R * 0.393 + pixel.G * 0.769 + pixel.B * 0.189)
                                                    Dim sepiaG As Integer = CInt(pixel.R * 0.349 + pixel.G * 0.686 + pixel.B * 0.168)
                                                    Dim sepiaB As Integer = CInt(pixel.R * 0.272 + pixel.G * 0.534 + pixel.B * 0.131)

                                                    sepiaR = Math.Min(255, Math.Max(0, sepiaR))
                                                    sepiaG = Math.Min(255, Math.Max(0, sepiaG))
                                                    sepiaB = Math.Min(255, Math.Max(0, sepiaB))

                                                    Return Color.FromArgb(sepiaR, sepiaG, sepiaB)
                                                End Function).ToArray()

        Dim resultBitmap As New Bitmap(image.Width, image.Height)
        For y As Integer = 0 To image.Height - 1
            For x As Integer = 0 To image.Width - 1
                resultBitmap.SetPixel(x, y, result(y * image.Width + x))
            Next
        Next

        Return resultBitmap
    End Function

    Private Function ApplyBlurEffect(image As Bitmap, radius As Integer) As Bitmap
        If image Is Nothing Then
            Return image
        End If

        Dim bitmap As New Bitmap(image.Width, image.Height, PixelFormat.Format32bppArgb)
        Using g As Graphics = Graphics.FromImage(bitmap)
            g.DrawImage(image, New Rectangle(0, 0, bitmap.Width, bitmap.Height))
        End Using

        'PLINQ'
        Dim result = bitmap.AsParallel().Select(Function(pixel)
                                                    Dim r As Double = 0
                                                    Dim g As Double = 0
                                                    Dim b As Double = 0
                                                    Dim kernelSum As Double = 0

                                                    For i As Integer = -radius To radius
                                                        For j As Integer = -radius To radius
                                                            Dim px As Integer = Math.Max(0, Math.Min(bitmap.Width - 1, pixel.X + i))
                                                            Dim py As Integer = Math.Max(0, Math.Min(bitmap.Height - 1, pixel.Y + j))

                                                            Dim neighborColor = bitmap.GetPixel(px, py)
                                                            Dim value As Double = Math.Exp(-((i * i + j * j) / (2 * radius * radius))) / (2 * Math.PI * radius * radius)

                                                            r += neighborColor.R * value
                                                            g += neighborColor.G * value
                                                            b += neighborColor.B * value
                                                            kernelSum += value
                                                        Next
                                                    Next

                                                    ' normalizare culori
                                                    r /= kernelSum
                                                    g /= kernelSum
                                                    b /= kernelSum

                                                    r = Math.Min(255, Math.Max(0, r))
                                                    g = Math.Min(255, Math.Max(0, g))
                                                    b = Math.Min(255, Math.Max(0, b))

                                                    Return Color.FromArgb(CInt(r), CInt(g), CInt(b))
                                                End Function).ToArray()

        Dim resultBitmap As New Bitmap(image.Width, image.Height)
        For y As Integer = 0 To image.Height - 1
            For x As Integer = 0 To image.Width - 1
                resultBitmap.SetPixel(x, y, result(y * image.Width + x))
            Next
        Next

        Return resultBitmap
    End Function